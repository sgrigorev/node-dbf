// Generated by CoffeeScript 1.12.7
(function() {
  var Header, fs, iconv,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  fs = require('fs');

  iconv = require('iconv-lite');

  Header = (function() {
    function Header(filename, encoding) {
      this.filename = filename;
      this.encoding = encoding;
      this.parseFieldSubRecord = bind(this.parseFieldSubRecord, this);
      this.parseDate = bind(this.parseDate, this);
      return this;
    }

    Header.prototype.parse = function(callback) {
      return fs.readFile(this.filename, (function(_this) {
        return function(err, buffer) {
          var i;
          if (err) {
            throw err;
          }
          _this.type = iconv.decode(buffer.slice(0, 1), _this.encoding);
          _this.dateUpdated = _this.parseDate(buffer.slice(1, 4));
          _this.numberOfRecords = _this.convertBinaryToInteger(buffer.slice(4, 8));
          _this.start = _this.convertBinaryToInteger(buffer.slice(8, 10));
          _this.recordLength = _this.convertBinaryToInteger(buffer.slice(10, 12));
          i = 32;
          _this.fields = (function() {
            var results;
            results = [];
            while (buffer[i] !== 0x0D) {
              results.push(this.parseFieldSubRecord(buffer.slice(i, i += 32)));
            }
            return results;
          }).call(_this);
          return callback(_this);
        };
      })(this));
    };

    Header.prototype.parseDate = function(buffer) {
      var day, month, year;
      year = this.convertBinaryToInteger(buffer.slice(0, 1));
      year = year >= 60 ? year + 1900 : year + 2000;
      month = (this.convertBinaryToInteger(buffer.slice(1, 2))) - 1;
      day = this.convertBinaryToInteger(buffer.slice(2, 3));
      return new Date(year, month, day);
    };

    Header.prototype.parseFieldSubRecord = function(buffer) {
      var header;
      return header = {
        name: iconv.decode(buffer.slice(0, 11), this.encoding).replace(/[\u0000]+$/, ''),
        type: iconv.decode(buffer.slice(11, 12), this.encoding),
        displacement: this.convertBinaryToInteger(buffer.slice(12, 16)),
        length: this.convertBinaryToInteger(buffer.slice(16, 17)),
        decimalPlaces: this.convertBinaryToInteger(buffer.slice(17, 18))
      };
    };

    Header.prototype.convertBinaryToInteger = function(buffer) {
      return buffer.readInt32LE(0, true);
    };

    return Header;

  })();

  module.exports = Header;

}).call(this);
